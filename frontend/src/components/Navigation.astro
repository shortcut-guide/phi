---
import PictureImage from "@/f/components/PictureImage.astro";
import ResponsiveToggle from '@/f/components/ResponsiveToggle.astro'
import Logo from '@/f/components/Logo.astro'
---

<div id="main-navigation">
  <nav id="vertical-nav" class="position-fixed flex flex-col w-[72px] h-screen overflow-y-auto overflow-x-hidden border-r border-gray-200 bg-white z-5">
    <div class="gap-24 h-full flex items-center justify-space-between flex-col box-border">
      <div class="gap-24 flex items-center flex-col box-border">
        <a href="/" aria-label="ホーム" class="flex items-center justify-center h-12 w-full hover:bg-gray-100 focus:outline-none focus:bg-gray-200">
          <Logo />
        </a>
        <button type="button" aria-label="探索する" class="flex items-center justify-center h-12 w-full border-none hover:bg-gray-100 focus:outline-none focus:bg-gray-200">
          <i class="fi fi-rr-category h-6 w-6"></i>
        </button>
        <a href="/pin-creation-tool/" aria-label="特価を探す" class="flex items-center justify-center h-12 w-full border-none hover:bg-gray-100 focus:outline-none focus:bg-gray-200">
          <PictureImage src="/assets/img/sale.png" alt="sale" width={56} height={56} />  
        </a>
        <button type="button" aria-label="最新情報" class="flex items-center justify-center h-12 w-full border-none hover:bg-gray-100 focus:outline-none focus:bg-gray-200">
          <PictureImage src="/assets/img/new.png" alt="new" width={56} height={56} />  
        </button>
        <button type="button" aria-label="メッセージ" class="flex items-center justify-center h-12 w-full border-none hover:bg-gray-100 focus:outline-none focus:bg-gray-200">
          <PictureImage src="/assets/img/message.png" alt="message" width={56} height={56} />
        </button>
      </div>
      
      <div class="box-border">
        <button type="button" aria-label="その他のオプション" class="flex items-center justify-center h-12 w-full border-none hover:bg-gray-100 focus:outline-none focus:bg-gray-200">
          <PictureImage src="/assets/img/option.png" alt="option" width={56} height={56} />
        </button>
      </div>
    </div>
  </nav>
</div>

<script>
  // variables
  const mainNav = document.querySelector('#main-navigation')
  const mainMenu = mainNav ? mainNav.querySelector('ul') : null
  const toggleExpandedView = document.querySelector('.toggle-expanded-view')
  const menuIconLabels = mainNav ? [...mainNav.querySelectorAll('.sr-only')] : []
  const mediaQuery = window.matchMedia('(min-width: 48em)')
  let isMenuExpanded = localStorage.getItem('isMenuExpanded')

  // functions
  const setActiveMenuItem = () => {
    if (!mainMenu) return;
    const menuItems = [...mainMenu.querySelectorAll('a:not([rel*="external"])')]

    menuItems.forEach(menuItem => {
      const anchor = menuItem as HTMLAnchorElement;
      if (anchor.pathname === window.location.pathname) {
        anchor.classList.add('is-active')
        anchor.setAttribute('aria-current', 'page')
      }
    })
  }

  const expandMenu = () => {
    if (!mainNav) return;
    mainNav.classList.add('is-expanded')
    localStorage.setItem('isMenuExpanded', 'true')
    if (toggleExpandedView) {
      toggleExpandedView.setAttribute('aria-expanded', 'true')
      const span = toggleExpandedView.querySelector('span')
      if (span) span.textContent = 'Collapse menu'
    }
    
    menuIconLabels.forEach(menuIconLabel => {
      menuIconLabel.classList.remove('sr-only')
    })
  }
  const collapseMenu = () => {
    if (!mainNav) return;
    mainNav.classList.remove('is-expanded')
    localStorage.setItem('isMenuExpanded', '')
    if (toggleExpandedView) {
      toggleExpandedView.setAttribute('aria-expanded', 'false')
      const span = toggleExpandedView.querySelector('span')
      if (span) span.textContent = 'Expand menu'
    }
    
    menuIconLabels.forEach(menuIconLabel => {
      menuIconLabel.classList.add('sr-only')
    })
  }
  const checkViewportWidth = () => {
    if (!mainNav) return;
    if (mediaQuery.matches) {
      mainNav.classList.add('is-desktop')
      mainNav.classList.remove('is-mobile')

      collapseMenu()
    } else {
      mainNav.classList.remove('is-desktop')
      mainNav.classList.add('is-mobile')

      collapseMenu()
    }
  }

  // execution
  mainMenu && mainMenu.addEventListener('keydown', event => {
    const currentMenuItem = event.target && (event.target as Element).closest ? (event.target as Element).closest('li') : null
    const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
    const currentIndex = currentMenuItem ? menuItems.findIndex(item => item === currentMenuItem) : -1

    const key = event.key
    let targetItem

    if (key === 'ArrowDown' && currentMenuItem) {
      event.preventDefault()
      if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
        targetItem = menuItems[0]
      } else {
        targetItem = menuItems[currentIndex + 1]
      }
    }

    if (key === 'ArrowUp' && currentMenuItem) {
      event.preventDefault()
      if (menuItems.indexOf(currentMenuItem) === 0) {
        targetItem = menuItems[menuItems.length - 1]
      } else {
        targetItem = menuItems[currentIndex - 1]
      }
    }

    if (key === 'Escape') {
      targetItem = menuItems[0]
    }

    if (targetItem) {
      const focusable = targetItem.querySelector('a, button, input');
      if (focusable && 'focus' in focusable) (focusable as HTMLElement).focus();
    }
  })

  if (toggleExpandedView) {
    toggleExpandedView.addEventListener('click', () => {
      if (mainNav && mainNav.classList.contains('is-expanded')) {
        collapseMenu()
      } else {
        expandMenu()
      }
    })
  }

  window.addEventListener('resize', checkViewportWidth)

  setActiveMenuItem()
  checkViewportWidth()

  if (isMenuExpanded === 'true') {
    expandMenu()
  }
</script>

<style lang="scss" is:global>
  @use '@/f/assets/scss/base/border' as *;
  @use '@/f/assets/scss/base/breakpoint' as *;
  @use '@/f/assets/scss/base/elevation' as *;
  @use '@/f/assets/scss/base/size' as *;
</style>
