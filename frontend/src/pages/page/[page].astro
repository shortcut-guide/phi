---
import { PinGrid } from "@/f/components/PinGrid";
import { trackGAEvent } from "@/f/utils/track";
import { messages } from "@/f/config/messageConfig";

const lang = "__MSG_LANG__";
const t = ((messages.pageListPage as any)[lang]) ?? {
  title: (page: number) => "",
  ogTitle: (page: number) => "",
  description: (page: number) => "",
  ogDescription: ""
};

const apiUrl = import.meta.env.PUBLIC_API_BASE_URL;

export async function getStaticPaths() {
  const limit = 30;
  let allItems = [];
  try {
    const res = await fetch(`${apiUrl}/api/pins`);
    if (res.status === 404) throw new Error("API returned 404");
    if (!res.ok) throw new Error(`Failed to fetch pins: ${res.status} ${res.statusText}`);
    allItems = await res.json();
  } catch (err) {
    console.error("🔥 API fetch 失敗:", err);
  }
  
  // API からデータが取得できなかった場合は、1 ページ分（空リスト）を作成
  if (!allItems.length) {
    return [{
      params: { page: "1" },
      props: { items: [] }
    }];
  }
  
  const totalPages = Math.ceil(allItems.length / limit);
  return Array.from({ length: totalPages }, (_, i) => {
    const page = i + 1;
    const offset = (page - 1) * limit;
    return {
      params: { page: String(page) },
      props: { items: allItems.slice(offset, offset + limit) }
    };
  });
}

const page = Number(Astro.params.page || "1");
trackGAEvent("scroll_page", { page: { page } });

// getStaticPaths で取得した items を利用するため再度の fetch は不要
const items = Astro.props.items;
const first = items?.[0];
const ogImage = first?.imageUrl || "/default-og.jpg";
const ogTitle = t.ogTitle(page);
const ogDescription = t.ogDescription;
---

<html lang="ja">
  <head>
    <title>{ogTitle}</title>
    <meta name="description" content={t.description(page)} />
    <meta property="og:title" content={ogTitle} />
    <meta property="og:description" content={ogDescription} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`https://phis.jp/page/${page}`} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={ogTitle} />
    <meta name="twitter:image" content={ogImage} />

    <script type="application/ld+json">
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": "CollectionPage",
        "name": t.ogTitle(page),
        "mainEntity": items.map((p) => ({
          "@type": "Product",
          "name": p.title,
          "image": p.imageUrl,
          "url": `https://phis.jp/products/${p.id}`,
        })),
      })}
    </script>
  </head>
  <body class="p-6">
    <h1 class="text-xl font-bold mb-4">{t.title(page)}</h1>

    <PinGrid items={items} loadMore={() => {}} onSelect={() => {}} />
  </body>
</html>
