---
import { useState, useEffect } from 'preact/hooks';
import { PinGrid } from '../components/PinGrid';
import { ProductDetail } from '../components/ProductDetail';

  const Page = () => {
    const [items, setItems] = useState([]);
    const [page, setPage] = useState(1);
    const [selected, setSelected] = useState(null);
    const [expanded, setExpanded] = useState(false);
  };

  const loadPage = async (p: number, overwrite = false) => {
    const res = await fetch(`/api/pins?offset=${(p - 1) * 30}`);
    const more = await res.json();

    if (overwrite) {
      setItems(more); // 優先ページは一度上書き
    } else {
      setItems(prev => [...prev, ...more]);
    }

    setPage(p);
    history.replaceState({ page: p, items, scrollY: 0 }, '', `/page/${p}`);
  };

  // ページ番号取得
  const getInitialPageFromPath = () => {
    const match = location.pathname.match(/^\/page\/(\d+)/);
    return match ? parseInt(match[1], 10) : 1;
  };

  // 対象ページの先まで 優先して読み込む
  const loadInitial = async () => {
    const initialPage = getInitialPageFromPath();

    // 1. 対象ページのみを優先読み込み
    await loadPage(initialPage, true); // true = 優先的に上書き

    // 2. レンダリング後に対象位置へスクロール
    requestAnimationFrame(() => {
      const targetIndex = (initialPage - 1) * 30;
      const targetEl = document.querySelectorAll('[data-pin]')?.[0]; // 最初のitem
      if (targetEl) {
        const offsetTop = (targetEl as HTMLElement).offsetTop;
        window.scrollTo({ top: offsetTop - 20, behavior: 'smooth' });
      }
    });

    // 3. 残りの前ページを順次ロード（非同期に）
    for (let i = 1; i < initialPage; i++) {
      loadPage(i, false);
    }
  };

  useEffect(() => {
    loadInitial();

    window.addEventListener('popstate', (e) => {
      const state = e.state;
      if (state?.items) {
        setItems(state.items);
        setPage(state.page);

        // 遅延スクロール復元
        setTimeout(() => {
          window.scrollTo(0, state.scrollY || 0);
        }, 0);
      } else {
        // fallback: ページ番号から再取得
        const pageFromURL = getInitialPageFromPath();
        setItems([]);
        for (let i = 1; i <= pageFromURL; i++) {
          loadPage(i);
        }
      }
    });

    return () => window.removeEventListener('popstate', () => {});
  }, []);

  const handleSelect = (item) => {
    setSelected(item);
    setExpanded(false);
  };

  return (
    <div className="w-full h-screen flex flex-col overflow-hidden">
      <div className={`transition-all duration-300 ${expanded ? 'h-0' : 'h-2/3'} overflow-y-auto`}>
        <PinGrid items={items} loadMore={() => loadPage(page + 1)} onSelect={handleSelect} />
      </div>
      <div className={`transition-all duration-300 bg-white shadow-md ${expanded ? 'h-full' : 'h-1/3'} overflow-y-auto`}>
        <ProductDetail
          product={selected}
          onExpand={() => setExpanded(true)}
          onClose={() => setSelected(null)}
        />
      </div>
    </div>
  );
};
---
<Page />
