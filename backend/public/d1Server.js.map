{
  "version": 3,
  "sources": ["../src/d1Server.ts", "../src/routes/token.ts", "../src/services/token.ts", "../src/routes/products.ts", "../src/config/consoleMessage.ts", "../src/config/messageConfig.ts", "../src/utils/lang.ts", "../src/utils/contextHolder.ts", "../src/utils/d1.ts", "../src/utils/executeQuery.ts", "../src/models/ProductModel.ts", "../src/services/products.ts", "../src/controllers/productController.ts", "../src/api/products.ts"],
  "sourcesContent": ["import { Hono } from \"hono\";\nimport { cors } from \"hono/cors\";\nimport { serve } from '@hono/node-server';\nimport type { Env } from \"@/b/types/env\";\nimport { tokenRoutes } from '@/b/routes/token';\nimport { productRoutes } from '@/b/routes/products';\nimport { renderIndex } from \"@/b/views/index\";\n\nconst app = new Hono<{ Bindings: Env }>();\n\n// \u2705 CORS \u3092\u6709\u52B9\u5316\napp.use(\n    \"*\",\n    cors({\n        origin: \"*\", // \u2705 \u3059\u3079\u3066\u306E\u30AA\u30EA\u30B8\u30F3\u304B\u3089\u306E\u30A2\u30AF\u30BB\u30B9\u3092\u8A31\u53EF\n        allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n        allowHeaders: [\"Content-Type\", \"Authorization\"],\n    })\n);\n\n// Content Security Policy: allow fonts from self and data URIs\napp.use(\"*\", async (c, next) => {\n    c.header(\n        \"Content-Security-Policy\",\n        \"default-src 'self'; font-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self';\"\n    );\n    await next();\n});\n\napp.route(\"/api/token\", tokenRoutes);\napp.route(\"/api/products\", productRoutes);\napp.get(\"/api/token/\", (c) => c.redirect(\"/api/token\", 301));\napp.get('/api/products/', (c) => c.redirect('/api/products', 301));\n\napp.notFound((c) => {\n    return c.json({ error: \"Not Found\" }, 404);\n});\n\nconst PORT = Number(process.env.PORT) || 3000;\n\nconsole.log(`\uD83D\uDE80 Server listening on http://localhost:${PORT}`);\nserve({ fetch: app.fetch, port: PORT });", "import { Hono } from 'hono';\nimport { getToken, saveToken, updateToken, deleteToken } from '@/b/services/token';\n\nexport const tokenRoutes = new Hono<{ Bindings: { DB: D1Database } }>();\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u53D6\u5F97\ntokenRoutes.get('/api/token', async (c) => {\n  try {\n    const token = await getToken(c.env.DB);\n    if (!token || !token.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    return c.json(token);\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u4FDD\u5B58\ntokenRoutes.post('/api/token', async (c) => {\n  try {\n    const body = await c.req.json();\n    if (!body || !body.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    await saveToken(c.env.DB, body);\n    return c.json({ status: 'saved' });\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u4FDD\u5B58\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u66F4\u65B0\ntokenRoutes.put('/api/token', async (c) => {\n  try {\n    const body = await c.req.json();\n    if (!body || !body.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    await updateToken(c.env.DB, body);\n    return c.json({ status: 'updated' });\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u66F4\u65B0\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u524A\u9664\ntokenRoutes.delete('/api/token', async (c) => {\n  try {\n    const body = await c.req.json();\n    if (!body || !body.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    await deleteToken(c.env.DB);\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u524A\u9664\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});", "/// <reference types=\"@cloudflare/workers-types\" />\n\n// D1 \u30AF\u30A8\u30EA\u30E9\u30C3\u30D1\u30FC\nexport const getToken = async (db: D1Database) => {\n  return await db.prepare('SELECT * FROM oauth_tokens ORDER BY id DESC LIMIT 1').first();\n};\n\nexport const saveToken = async (\n  db: D1Database,\n  token: { access_token: string; refresh_token: string; expires_at: number },\n) => {\n  await db\n    .prepare(`INSERT INTO oauth_tokens (access_token, refresh_token, expires_at) VALUES (?, ?, ?)`)\n    .bind(token.access_token, token.refresh_token, token.expires_at)\n    .run();\n};\n\nexport const updateToken = async (\n  db: D1Database,\n  token: { access_token: string; refresh_token: string; expires_at: number },\n) => {\n  await db\n    .prepare(\n      `UPDATE oauth_tokens SET access_token = ?, refresh_token = ?, expires_at = ? WHERE id = (SELECT id FROM oauth_tokens ORDER BY id DESC LIMIT 1)`,\n    )\n    .bind(token.access_token, token.refresh_token, token.expires_at)\n    .run();\n};\n\nexport const deleteToken = async (db: D1Database) => {\n  await db.prepare(`DELETE FROM oauth_tokens`).run();\n};", "import { Hono } from 'hono';\nimport type { Context } from 'hono';\nimport { GetProducts } from '@/b/api/products';\n\nexport const productRoutes = new Hono();\n\nproductRoutes.get('/', async (c: Context) => {\n  console.log(\"[productRoutes] GET /api/products invoked, path =\", c.req.path);\n  // \u30B3\u30F3\u30C8\u30ED\u30FC\u30E9\u3092\u547C\u3073\u51FA\u3057\n  const resp = await GetProducts(c);\n  // JSON \u3092\u30D1\u30FC\u30B9\n  const data = (await resp.json()) as any;\n  // Hono \u306E c.json \u3067\u8FD4\u5374\n  return c.json(data, 200);\n});", "export const cMessages = {\r\n    0o1: \"Unknown error\",\r\n    0o2: \"Upload or DB error\",\r\n    0o3: \"Invalid product data\",\r\n    0o4: \"Internal server error\",\r\n    0o5: \"Imgur upload failed\",\r\n}", "export const messages = {\n  passwordReset1: '\u30EA\u30BB\u30C3\u30C8\u30EA\u30F3\u30AF\u3092\u9001\u4FE1\u3057\u307E\u3057\u305F',\n  passwordReset2: '\u30EA\u30BB\u30C3\u30C8\u30EA\u30F3\u30AF\u306F1\u6642\u9593\u6709\u52B9\u3067\u3059',\n  passwordReset3: '\u30EA\u30BB\u30C3\u30C8\u30EA\u30F3\u30AF\u306F\u7121\u52B9\u3067\u3059',\n  ErrorMail1: '\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u304C\u767B\u9332\u3055\u308C\u3066\u3044\u307E\u305B\u3093',\n  ErrorMail2: '\u30E1\u30FC\u30EB\u9001\u4FE1\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F',\n  ErrorMail3: '\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u306F\u5FC5\u9808\u3067\u3059',\n  ErrorPasswordReset1: '\u30EA\u30BB\u30C3\u30C8\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F',\n  utilsD1:{\n    ja:{\n      ErrorSITE_DB: 'D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (SITE_DB \u304C\u672A\u5B9A\u7FA9)',\n      ErrorSEARCHLOGS_DB: 'D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (SEARCHLOGS_DB \u304C\u672A\u5B9A\u7FA9)',\n      ErrorPROFILE_DB: 'D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (PROFILE_DB \u304C\u672A\u5B9A\u7FA9)',\n      ErrorPRODUCTS_DB: 'D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (PRODUCTS_DB \u304C\u672A\u5B9A\u7FA9)'\n    },\n    en:{\n      ErrorSITE_DB: 'D1 client is not bound (SITE_DB is undefined)',\n      ErrorSEARCHLOGS_DB: 'D1 client is not bound (SEARCHLOGS_DB is undefined)',\n      ErrorPROFILE_DB: 'D1 client is not bound (PROFILE_DB is undefined)',\n      ErrorPRODUCTS_DB: 'D1 client is not bound (PRODUCTS_DB is undefined)'\n    }\n  },\n  searchClient:{\n    ja: {\n      ErrorSearch: '\u5546\u54C1\u691C\u7D22\u306B\u5931\u6557\u3057\u307E\u3057\u305F',\n      ErrorSuggest: '\u30B5\u30B8\u30A7\u30B9\u30C8\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F'\n    },\n    en: {\n      ErrorSearch: 'Failed to search products',\n      ErrorSuggest: 'Failed to fetch suggestions'\n    }\n  },\n  api: {\n    sites: {\n      fetchError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      validateTitleUrl: {\n        ja: 'title \u3068 url \u306F\u5FC5\u9808\u3067\u3059\u3002',\n      },\n      insertError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u8FFD\u52A0\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      notFound: {\n        ja: '\u30B5\u30A4\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002',\n      },\n      updateError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u66F4\u65B0\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      noUpdateData: {\n        ja: '\u66F4\u65B0\u3059\u308B\u30C7\u30FC\u30BF\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002',\n      },\n      updateSuccess: {\n        ja: '\u66F4\u65B0\u6210\u529F',\n      },\n      deleteError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u524A\u9664\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      deleteNotFound: {\n        ja: '\u524A\u9664\u3059\u308B\u30C7\u30FC\u30BF\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002',\n      },\n      deleteSuccessPrefix: {\n        ja: '\u524A\u9664\u6210\u529F: ',\n      },\n    }\n  }\n};", "export function getLang(): \"ja\" | \"en\" {\r\n  // \u30AF\u30A8\u30EA\u30D1\u30E9\u30E1\u30FC\u30BF\r\n  const urlLang = typeof window !== \"undefined\"\r\n    ? new URLSearchParams(window.location.search).get(\"lang\")\r\n    : null;\r\n\r\n  if (urlLang === \"ja\" || urlLang === \"en\") return urlLang;\r\n\r\n  // localStorage\r\n  if (typeof localStorage !== \"undefined\") {\r\n    const storedLang = localStorage.getItem(\"lang\");\r\n    if (storedLang === \"ja\" || storedLang === \"en\") return storedLang;\r\n  }\r\n\r\n  // \u30D6\u30E9\u30A6\u30B6\u306E\u8A00\u8A9E\u8A2D\u5B9A\r\n  if (typeof navigator !== \"undefined\") {\r\n    const browserLang = navigator.language.slice(0, 2);\r\n    if (browserLang === \"ja\" || browserLang === \"en\") return browserLang;\r\n  }\r\n\r\n  // \u30C7\u30D5\u30A9\u30EB\u30C8\r\n  return \"ja\";\r\n}\r\n", "// backend/src/utils/contextHolder.ts\n\nimport type { Context } from 'hono';\nimport type { D1Database } from '@cloudflare/workers-types';\n\ntype Env = {\n  SEARCHLOGS_DB?: D1Database;\n  PROFILE_DB?: D1Database;\n  PRODUCTS_DB?: D1Database;\n};\n\nlet currentContext: Context | null = null;\n\nexport const setContext = (c: Context) => {\n  currentContext = c;\n};\n\nexport const getContext = (): Context => {\n  if (!currentContext) throw new Error('Context not set');\n  return currentContext;\n};\n\nexport const getD1Client = (key: keyof Env): D1Database => {\n  const ctx = getContext();\n  const db = ctx.env?.[key];\n  if (!db) throw new Error(`D1Database \"${key}\" is not bound.`);\n  return db as D1Database;\n};", "import { D1Database } from '@cloudflare/workers-types';\nimport { messages } from \"@/b/config/messageConfig\";\nimport { getLang } from \"@/b/utils/lang\";\nimport { getD1Client } from '@/b/utils/contextHolder';\n\nconst lang = getLang();\nconst t = messages.utilsD1?.[lang];\n\nexport const getD1SearchLogs = (): D1Database => {\n  try {\n    return getD1Client(\"SEARCHLOGS_DB\");\n  } catch {\n    throw new Error(t.ErrorSEARCHLOGS_DB);\n  }\n};\n\nexport const getD1UserProfile = (): D1Database => {\n  try {\n    return getD1Client(\"PROFILE_DB\");\n  } catch {\n    throw new Error(t.ErrorPROFILE_DB);\n  }\n};\n\nexport const getD1Product = (): D1Database => {\n  try {\n    return getD1Client(\"PRODUCTS_DB\");\n  } catch {\n    throw new Error(t.ErrorPRODUCTS_DB);\n  }\n};", "export async function executeQuery<T = Record<string, unknown>>(\n  db: D1Database, // \u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u5F15\u6570\u3068\u3057\u3066\u53D7\u3051\u53D6\u308B\n  query: string,\n  bindings: any[] = [],\n  isSelect = false\n): Promise<T[] | D1Result> {\n  const stmt = db.prepare(query).bind(...bindings);\n  if (!isSelect) return await stmt.run();\n\n  const result = await stmt.all();\n  return [...result.results] as T[];\n}\n\n// \u9078\u629E\u7CFB\uFF08SELECT\uFF09\u5C02\u7528\uFF1A\u8FD4\u308A\u5024\u306F T[]\nexport async function selectQuery<T = Record<string, unknown>>(\n  db: D1Database,\n  query: string,\n  bindings: any[] = []\n): Promise<T[]> {\n  const stmt = db.prepare(query).bind(...bindings);\n  const result = await stmt.all();\n  return [...result.results] as T[];\n}", "import { getD1Product } from \"@/b/utils/d1\";\nimport { selectQuery,executeQuery } from \"@/b/utils/executeQuery\";\nimport { Product } from \"@/b/types/product\";\n\nexport async function getProducts() {\n  const db = getD1Product();\n  return await executeQuery(db, \"SELECT * FROM products\", [], true);\n}\n\nexport async function createProduct(product: Product) {\n  const db = getD1Product();\n  const query = `\n    INSERT INTO products (id, name, shop_name, platform, base_price, ec_data)\n    VALUES (?, ?, ?, ?, ?, ?)`;\n  const bindings = [\n    product.id,\n    product.name,\n    product.shop_name,\n    product.platform,\n    product.base_price,\n    product.ec_data,\n  ];\n  return await executeQuery(db, query, bindings);\n}\n\nexport async function updateProduct(product: Product) {\n  const db = getD1Product();\n  const query = `\n    UPDATE products SET\n      name = ?, shop_name = ?, platform = ?, base_price = ?, ec_data = ?, updated_at = CURRENT_TIMESTAMP\n    WHERE id = ?`;\n  const bindings = [\n    product.name,\n    product.shop_name,\n    product.platform,\n    product.base_price,\n    product.ec_data,\n    product.id,\n  ];\n  return await executeQuery(db, query, bindings);\n}\n\nexport async function deleteProduct(id: string) {\n  const db = getD1Product();\n  const query = \"DELETE FROM products WHERE id = ?\";\n  return await executeQuery(db, query, [id]);\n}\n\nexport async function getFilteredProducts(\n  {\n    id,\n    name,\n    shop_name,\n    platform,\n    base_price,\n    ec_data,\n    limit,\n  }: {\n    id?: string;\n    name?: string;\n    shop_name?: string;\n    platform?: string;\n    base_price?: number;\n    ec_data?: any\n    limit?: number;\n  }\n){\n  const db = getD1Product();\n  let query = \"SELECT * FROM products\";\n  const conditions: string[] = [];\n  const bindings: any[] = [];\n\n  if (id) {\n    conditions.push(\"id = ?\");\n    bindings.push(id);\n  }\n\n  if (name) {\n    conditions.push(\"name = ?\");\n    bindings.push(name);\n  }\n\n  if (shop_name) {\n    conditions.push(\"shop_name = ?\");\n    bindings.push(shop_name);\n  }\n\n  if (platform) {\n    conditions.push(\"platform = ?\");\n    bindings.push(platform);\n  }\n\n  if (base_price) {\n    conditions.push(\"base_price = ?\");\n    bindings.push(base_price);\n  }\n\n  if (ec_data) {\n    conditions.push(\"ec_data = ?\");\n    bindings.push(ec_data);\n  }\n\n  if (conditions.length > 0) {\n    query += \" WHERE \" + conditions.join(\" AND \");\n  }\n\n  if (!limit) {\n    limit = 10;\n  }\n\n  query += \" ORDER BY updated_at DESC LIMIT ?\";\n  bindings.push(limit);\n\n  return await selectQuery(db, query, bindings);\n}\n\nexport async function upsertProduct(product: Product) {\n  const db = getD1Product();\n  const query = `\n    INSERT INTO products (id, name, shop_name, platform, base_price, ec_data)\n    VALUES (?, ?, ?, ?, ?, ?)\n    ON CONFLICT(id) DO UPDATE SET\n      name = excluded.name,\n      shop_name = excluded.shop_name,\n      platform = excluded.platform,\n      base_price = excluded.base_price,\n      ec_data = excluded.ec_data,\n      updated_at = CURRENT_TIMESTAMP\n  `;\n  const bindings = [\n    product.id,\n    product.name,\n    product.shop_name,\n    product.platform,\n    product.base_price,\n    product.ec_data,\n  ];\n  return await executeQuery(db, query, bindings);\n}\n", "import { cMessages } from \"@/b/config/consoleMessage\";\nimport { createProduct, updateProduct, deleteProduct, getFilteredProducts } from \"@/b/models/ProductModel\";\nimport { validateProduct } from \"@/b/utils/validateProduct\";\nimport type { Product } from \"@/b/types/product\";\n\nexport async function fetchAllProducts() {\n  const res = await fetch('/api/products');\n  if (!res.ok) throw new Error('\u5546\u54C1\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F');\n  return res.json();\n}\n\nexport async function parseAndValidateProduct(data: any, id?: string): Promise<Product> {\n  if (typeof data !== \"object\" || data === null) {\n    throw new Error(\"Invalid request body: expected an object\");\n  }\n\n  const product: Product = {\n    id: id ?? crypto.randomUUID(),\n    name: data.name ?? \"Unknown Product\",\n    shop_name: data.shop_name ?? \"Unknown Shop\",\n    platform: data.platform ?? \"Unknown Platform\",\n    base_price: data.base_price ?? 0,\n    ec_data: typeof data.ec_data === \"string\" ? data.ec_data : JSON.stringify(data.ec_data ?? {}),\n  };\n\n  if (!validateProduct(product)) {\n    throw new Error(cMessages[2]); // Invalid product data\n  }\n\n  return product;\n}\n\nexport async function handleCreateProduct(request: Request): Promise<Response> {\n  const product = await parseAndValidateProduct(await request.json());\n  await createProduct(product);\n  return new Response(JSON.stringify({ status: \"success\", message: cMessages[1] }), {\n    status: 201,\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n}\n\nexport async function handleUpdateProduct(request: Request, id?: string): Promise<Response> {\n  if (!id) {\n    return new Response(JSON.stringify({ status: \"error\", message: \"Product ID is required\" }), {\n      status: 400,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n  const product = await parseAndValidateProduct(await request.json(), id);\n  await updateProduct(product);\n  return new Response(JSON.stringify({ status: \"success\", message: cMessages[1] }), {\n    status: 200,\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n}\n\nexport async function handleDeleteProduct(id?: string): Promise<Response> {\n  if (!id) {\n    return new Response(JSON.stringify({ status: \"error\", message: \"Product ID is required\" }), {\n      status: 400,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n  await deleteProduct(id);\n  return new Response(JSON.stringify({ status: \"success\", message: cMessages[1] }), {\n    status: 200,\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n}\n\nexport async function handleGetFilteredProducts(id?: string, name?: string, shop_name?: string, platform?: string, base_price?: number, ec_data?: any, limit?: number) {\n  return (await getFilteredProducts({ id, name, shop_name, platform, base_price, ec_data, limit })) ?? [];\n}", "// backend/controllers/productController.ts\r\nimport type { Context } from \"hono\";\r\nimport type { APIRoute, APIContext } from \"astro\";\r\n\r\nimport { cMessages } from \"@/b/config/consoleMessage\";\r\nimport {\r\n  handleCreateProduct,\r\n  handleUpdateProduct,\r\n  handleDeleteProduct,\r\n  handleGetFilteredProducts\r\n} from \"@/b/services/products\";\r\n\r\n// POST\r\nexport const POST: APIRoute = async ({ request }) => {\r\n  try {\r\n    return await handleCreateProduct(request);\r\n  } catch (error) {\r\n    return errorResponse(\"[POST /product]\", error);\r\n  }\r\n};\r\n\r\n// PUT\r\nexport const PUT: APIRoute = async ({ request, params }) => {\r\n  try {\r\n    return await handleUpdateProduct(request, params.id);\r\n  } catch (error) {\r\n    return errorResponse(\"[PUT /product/:id]\", error);\r\n  }\r\n};\r\n\r\n// DELETE\r\nexport const DELETE: APIRoute = async ({ params }) => {\r\n  try {\r\n    return await handleDeleteProduct(params.id);\r\n  } catch (error) {\r\n    return errorResponse(\"[DELETE /product/:id]\", error);\r\n  }\r\n};\r\n\r\n// GET\r\nexport async function GetFilteredProducts(c: Context): Promise<Response> {\r\n  try {\r\n    const id = c.req.query(\"id\");\r\n    const name = c.req.query(\"name\");\r\n    const shop_name = c.req.query(\"shop_name\");\r\n    const platform = c.req.query(\"platform\");\r\n    const limit = Number(c.req.query(\"limit\"));\r\n    const results = await handleGetFilteredProducts(id,name, shop_name, platform, limit);\r\n    return c.json(results, 200);\r\n  } catch (error) {\r\n    console.error(\"[GET /products] Error:\", error);\r\n    return c.json({ status: \"error\", message: cMessages[4] }, 500);\r\n  }\r\n}\r\n\r\n// \u5171\u901A\u30A8\u30E9\u30FC\u51FA\u529B\r\nfunction errorResponse(prefix: string, error: unknown): Response {\r\n  const message = error instanceof Error ? error.message : cMessages[4];\r\n  console.error(`${prefix} Error:`, message);\r\n  return new Response(JSON.stringify({ status: \"error\", message }), {\r\n    status: message === cMessages[2] ? 400 : 500,\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n}\r\n", "import { GetFilteredProducts } from \"@/b/controllers/productController\";\nimport type { Context } from \"hono\";\n\nexport async function GetProducts(c: Context): Promise<Response> {\n  return await GetFilteredProducts(c);\n}"],
  "mappings": "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",
  "names": ["Hono", "Hono", "Hono", "Hono"]
}
