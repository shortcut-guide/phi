{
  "version": 3,
  "sources": ["../src/d1Server.ts", "../src/routes/token.ts", "../src/services/token.ts", "../src/routes/products.ts", "../src/config/env.ts", "../src/utils/d1.ts", "../src/utils/executeQuery.ts", "../src/models/ProductModel.ts", "../src/config/consoleMessage.ts", "../src/controllers/productController.ts", "../src/api/products.ts", "../src/views/index.ts", "../src/config/messageConfig.ts"],
  "sourcesContent": ["import { Hono } from \"hono\";\nimport { cors } from \"hono/cors\";\nimport { serve } from '@hono/node-server';\nimport type { D1Database } from \"@cloudflare/workers-types\";\nimport { d1Route } from '@/b/routes/token';\nimport productRoutes from '@/b/routes/products';\nimport { renderIndex } from \"@/b/views/index\";\nimport { messages } from '@/b/config/messageConfig';\n\ntype Bindings = {\n    DB: D1Database;\n};\n\nconst publicApp = new Hono<{ Bindings: Bindings }>();\npublicApp.route('/api', productRoutes);\n\nconst app = new Hono<{ Bindings: Bindings }>().basePath('/admin');\n\n// \u2705 CORS \u3092\u6709\u52B9\u5316\napp.use(\n    \"*\",\n    cors({\n        origin: \"*\", // \u2705 \u3059\u3079\u3066\u306E\u30AA\u30EA\u30B8\u30F3\u304B\u3089\u306E\u30A2\u30AF\u30BB\u30B9\u3092\u8A31\u53EF\n        allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n        allowHeaders: [\"Content-Type\", \"Authorization\"],\n    })\n);\n\n// Content Security Policy: allow fonts from self and data URIs\napp.use(\"*\", async (c, next) => {\n  c.header(\n    \"Content-Security-Policy\",\n    \"default-src 'self'; font-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self';\"\n  );\n  await next();\n});\n\napp.get(\"/\", async (c) => {\n    const html = renderIndex();\n    return c.html(html);\n});\n\n// \u2705 \u3059\u3079\u3066\u306E\u30B5\u30A4\u30C8\u3092\u53D6\u5F97\napp.get(\"/api/sites\", async (c) => {\n    try {\n        const { results } = await c.env.DB.prepare(\"SELECT * FROM sites ORDER BY createdAt DESC\").all();\n        return c.json(results);\n    } catch (error) {\n        return c.json({ error: error instanceof Error ? error.message : messages.api.sites.fetchError.ja }, 500);\n    }\n});\n\n// \u2705 \u65B0\u3057\u3044\u30B5\u30A4\u30C8\u3092\u8FFD\u52A0\napp.post(\"/api/sites\", async (c) => {\n    try {\n        const body = await c.req.json();\n        const { title, url, element } = body;\n\n        if (!title || !url) {\n            return c.json({ error: messages.api.sites.validateTitleUrl.ja }, 400);\n        }\n\n        const jsonElement = element ? JSON.stringify(element) : \"{}\";\n        const { meta } = await c.env.DB.prepare(\n            \"INSERT INTO sites (title, url, element, createdAt) VALUES (?, ?, ?, CURRENT_TIMESTAMP) RETURNING id\"\n        )\n        .bind(title, url, jsonElement)\n        .run();\n\n        return c.json({ id: meta.last_row_id });\n    } catch (error) {\n        return c.json({ error: error instanceof Error ? error.message : messages.api.sites.insertError.ja }, 500);\n    }\n});\n\n// \u2705 \u7279\u5B9A\u306E\u30B5\u30A4\u30C8\u3092\u53D6\u5F97\napp.get(\"/api/sites/:id\", async (c) => {\n    try {\n        const id = c.req.param(\"id\");\n        const { results } = await c.env.DB.prepare(\"SELECT * FROM sites WHERE id = ?\").bind(id).all();\n\n        if (results.length === 0) {\n            return c.json({ error: messages.api.sites.notFound.ja }, 404);\n        }\n\n        return c.json(results[0]);\n    } catch (error) {\n        return c.json({ error: error instanceof Error ? error.message : messages.api.sites.fetchError.ja }, 500);\n    }\n});\n\n// \u2705 \u30B5\u30A4\u30C8\u3092\u66F4\u65B0\napp.put(\"/api/sites/:id\", async (c) => {\n    try {\n        const id = c.req.param(\"id\");\n        const body = await c.req.json();\n        const { title, url, element } = body;\n\n        if (!title || !url) {\n            return c.json({ error: messages.api.sites.validateTitleUrl.ja }, 400);\n        }\n\n        const jsonElement = element ? JSON.stringify(element) : \"{}\";\n        const { meta } = await c.env.DB.prepare(\n            \"UPDATE sites SET title = ?, url = ?, element = ? WHERE id = ?\"\n        )\n        .bind(title, url, jsonElement, id)\n        .run();\n\n        if (meta.changes === 0) {\n            return c.json({ error: messages.api.sites.noUpdateData.ja }, 404);\n        }\n\n        return c.json({ message: messages.api.sites.updateSuccess.ja });\n    } catch (error) {\n        return c.json({ error: error instanceof Error ? error.message : messages.api.sites.updateError.ja }, 500);\n    }\n});\n\n// \u2705 \u30B5\u30A4\u30C8\u3092\u524A\u9664\napp.delete(\"/api/sites/:id\", async (c) => {\n    try {\n        const id = c.req.param(\"id\");\n        const { meta } = await c.env.DB.prepare(\"DELETE FROM sites WHERE id = ?\").bind(id).run();\n\n        if (meta.changes === 0) {\n            return c.json({ error: messages.api.sites.deleteNotFound.ja }, 404);\n        }\n\n        return c.json({ message: messages.api.sites.deleteSuccessPrefix.ja + id });\n    } catch (error) {\n        return c.json({ error: error instanceof Error ? error.message : messages.api.sites.deleteError.ja }, 500);\n    }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u95A2\u9023\u306E\u30EB\u30FC\u30C8\u3092\u8FFD\u52A0\napp.route(\"/api/token\", d1Route);\n\nconst rootApp = new Hono<{ Bindings: Bindings }>();\nrootApp.route('/api', publicApp);\nrootApp.route('/', app);\nconst PORT = Number(process.env.PORT) || 3000;\nconsole.log(`\uD83D\uDE80 Server listening on http://localhost:${PORT}`);\nserve({ fetch: rootApp.fetch, port: PORT });", "import { Hono } from 'hono';\nimport { getToken, saveToken, updateToken, deleteToken } from '@/b/services/token';\n\nexport const d1Route = new Hono<{ Bindings: { DB: D1Database } }>();\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u53D6\u5F97\nd1Route.get('/api/token', async (c) => {\n  try {\n    const token = await getToken(c.env.DB);\n    if (!token || !token.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    return c.json(token);\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u4FDD\u5B58\nd1Route.post('/api/token', async (c) => {\n  try {\n    const body = await c.req.json();\n    if (!body || !body.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    await saveToken(c.env.DB, body);\n    return c.json({ status: 'saved' });\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u4FDD\u5B58\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u66F4\u65B0\nd1Route.put('/api/token', async (c) => {\n  try {\n    const body = await c.req.json();\n    if (!body || !body.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    await updateToken(c.env.DB, body);\n    return c.json({ status: 'updated' });\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u66F4\u65B0\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});\n\n// \u2705 \u30C8\u30FC\u30AF\u30F3\u3092\u524A\u9664\nd1Route.delete('/api/token', async (c) => {\n  try {\n    const body = await c.req.json();\n    if (!body || !body.token) {\n      return c.json({ error: '\u30C8\u30FC\u30AF\u30F3\u304C\u5FC5\u8981\u3067\u3059\u3002' }, 400);\n    }\n    await deleteToken(c.env.DB);\n  } catch (error) {\n    return c.json({ error: error instanceof Error ? error.message : \"\u30C8\u30FC\u30AF\u30F3\u306E\u524A\u9664\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002\" }, 500);\n  }\n});", "/// <reference types=\"@cloudflare/workers-types\" />\n\n// D1 \u30AF\u30A8\u30EA\u30E9\u30C3\u30D1\u30FC\nexport const getToken = async (db: D1Database) => {\n  return await db.prepare('SELECT * FROM oauth_tokens ORDER BY id DESC LIMIT 1').first();\n};\n\nexport const saveToken = async (\n  db: D1Database,\n  token: { access_token: string; refresh_token: string; expires_at: number },\n) => {\n  await db\n    .prepare(`INSERT INTO oauth_tokens (access_token, refresh_token, expires_at) VALUES (?, ?, ?)`)\n    .bind(token.access_token, token.refresh_token, token.expires_at)\n    .run();\n};\n\nexport const updateToken = async (\n  db: D1Database,\n  token: { access_token: string; refresh_token: string; expires_at: number },\n) => {\n  await db\n    .prepare(\n      `UPDATE oauth_tokens SET access_token = ?, refresh_token = ?, expires_at = ? WHERE id = (SELECT id FROM oauth_tokens ORDER BY id DESC LIMIT 1)`,\n    )\n    .bind(token.access_token, token.refresh_token, token.expires_at)\n    .run();\n};\n\nexport const deleteToken = async (db: D1Database) => {\n  await db.prepare(`DELETE FROM oauth_tokens`).run();\n};", "import { Hono } from 'hono';\nimport { handleGetProducts } from '@/b/api/products';\n\nconst productRoutes = new Hono();\nproductRoutes.get('/products', handleGetProducts);\n\nexport default productRoutes;", "// backend/src/config/env.ts\nimport { config } from 'dotenv';\nimport { resolve } from 'path';\n\n// \u74B0\u5883\u306B\u5FDC\u3058\u305F .env \u30D5\u30A1\u30A4\u30EB\u3092\u9078\u629E\nconst ENV = process.env.NODE_ENV || 'develop';\nconst envFile = resolve(process.cwd(), `.env.${ENV}`);\n\n// .env \u30D5\u30A1\u30A4\u30EB\u3092\u8AAD\u307F\u8FBC\u3080\nconfig({ path: envFile });\n\nconst required = (key: string): string => {\n  const value = process.env[key];\n  if (!value) throw new Error(`Missing environment variable: ${key}`);\n  return value;\n};\n\nexport const PORT = process.env.PORT || 3000;\nexport const NODE_ENV = ENV;\nexport const SEARCHLOGS_DB = required(\"CLOUDFLARE_D1_DATABASE_SEARCH_LOGS\");\nexport const PRODUCTS_DB = required(\"CLOUDFLARE_D1_DATABASE_PRODUCTS\");\nexport const PROFILE_DB = required(\"CLOUDFLARE_D1_DATABASE_PROFILE\");\nexport const PUP_DB = required(\"CLOUDFLARE_D1_DATABASE_PUP\");\nexport const PAYPAL_CLIENT_ID = required(\"PAYPAL_CLIENT_ID\");\nexport const PAYPAL_SECRET = required(\"PAYPAL_SECRET\");\nexport const PAYPAL_API_BASE = required(\"PAYPAL_API_BASE\");\nexport const IMGUR_CLIENT_ID = required(\"IMGUR_CLIENT_ID\");", "import { D1Database } from '@cloudflare/workers-types';\nimport { SEARCHLOGS_DB, PROFILE_DB, PRODUCTS_DB } from \"@/b/config/env\";\n\nlet DB: D1Database;\n\n// Cloudflare D1 \u306B\u63A5\u7D9A\u3059\u308B\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u3092\u53D6\u5F97\u3059\u308B\nexport const getD1SearchLogs = (): D1Database => {\n  // @ts-ignore - D1 \u306F Cloudflare Worker \u4E0A\u3067\u81EA\u52D5\u3067\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u308B\n  DB = SEARCHLOGS_DB;\n  if (!DB) throw new Error(\"D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (SEARCHLOGS_DB \u304C\u672A\u5B9A\u7FA9)\");\n  return DB;\n};\n\nexport const getD1UserProfile = (): D1Database => {\n  // @ts-ignore - D1 \u306F Cloudflare Worker \u4E0A\u3067\u81EA\u52D5\u3067\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u308B\n  DB = PROFILE_DB;\n  if (!DB) throw new Error(\"D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (PROFILE_DB \u304C\u672A\u5B9A\u7FA9)\");\n  return DB;\n};\n\nexport const getD1Product = (): D1Database => {\n  // @ts-ignore - D1 \u306F Cloudflare Worker \u4E0A\u3067\u81EA\u52D5\u3067\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u308B\n  DB = PRODUCTS_DB;\n  if (!DB) throw new Error(\"D1 \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u304C\u30D0\u30A4\u30F3\u30C9\u3055\u308C\u3066\u3044\u307E\u305B\u3093 (PRODUCTS_DB \u304C\u672A\u5B9A\u7FA9)\");\n  return DB;\n};", "export async function executeQuery<T = Record<string, unknown>>(\n  db: D1Database, // \u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u5F15\u6570\u3068\u3057\u3066\u53D7\u3051\u53D6\u308B\n  query: string,\n  bindings: any[] = [],\n  isSelect = false\n): Promise<T[] | D1Result> {\n  const stmt = db.prepare(query).bind(...bindings);\n  if (isSelect) {\n    const result = await stmt.all();\n    return result.results as T[];\n  } else {\n    return await stmt.run();\n  }\n}", "import { getD1Product } from \"@/b/utils/d1\";\nimport { executeQuery } from \"@/b/utils/executeQuery\";\nimport { Product } from \"@/b/types/product\";\n\nexport async function getProducts() {\n  const db = getD1Product();\n  return await executeQuery<Product>(db, \"SELECT * FROM products\", [], true);\n}\n\nexport async function createProduct(product: Product) {\n  const db = getD1Product();\n  const query = `\n    INSERT INTO products (id, name, shop_name, platform, base_price, ec_data)\n    VALUES (?, ?, ?, ?, ?, ?)`;\n  const bindings = [\n    product.id,\n    product.name,\n    product.shop_name,\n    product.platform,\n    product.base_price,\n    product.ec_data,\n  ];\n  return await executeQuery(db, query, bindings);\n}\n\nexport async function updateProduct(product: Product) {\n  const db = getD1Product();\n  const query = `\n    UPDATE products SET\n      name = ?, shop_name = ?, platform = ?, base_price = ?, ec_data = ?, updated_at = CURRENT_TIMESTAMP\n    WHERE id = ?`;\n  const bindings = [\n    product.name,\n    product.shop_name,\n    product.platform,\n    product.base_price,\n    product.ec_data,\n    product.id,\n  ];\n  return await executeQuery(db, query, bindings);\n}\n\nexport async function deleteProduct(id: string) {\n  const db = getD1Product();\n  const query = \"DELETE FROM products WHERE id = ?\";\n  return await executeQuery(db, query, [id]);\n}\n\nexport async function getFilteredProducts(\n  {\n    shop,\n    limit,\n    ownOnly,\n  }: {\n    shop?: string;\n    limit: number;\n    ownOnly: boolean;\n  }\n) {\n\n  const db = getD1Product();\n  let query = \"SELECT * FROM products\";\n  const conditions: string[] = [];\n  const bindings: any[] = [];\n\n  if (ownOnly) {\n    conditions.push(\"shop_name = ?\");\n    bindings.push(\"\u81EA\u793E\");\n  }\n\n  if (shop) {\n    conditions.push(\"site_name = ?\");\n    bindings.push(shop);\n  }\n\n  if (conditions.length > 0) {\n    query += \" WHERE \" + conditions.join(\" AND \");\n  }\n  query += \" ORDER BY updated_at DESC LIMIT ?\";\n  bindings.push(limit);\n\n  return await executeQuery<Product>(db, query, bindings, true);\n}\n\nexport async function upsertProduct(product: Product) {\n  const db = getD1Product();\n  const query = `\n    INSERT INTO products (id, name, shop_name, platform, base_price, ec_data)\n    VALUES (?, ?, ?, ?, ?, ?)\n    ON CONFLICT(id) DO UPDATE SET\n      name = excluded.name,\n      shop_name = excluded.shop_name,\n      platform = excluded.platform,\n      base_price = excluded.base_price,\n      ec_data = excluded.ec_data,\n      updated_at = CURRENT_TIMESTAMP\n  `;\n  const bindings = [\n    product.id,\n    product.name,\n    product.shop_name,\n    product.platform,\n    product.base_price,\n    product.ec_data,\n  ];\n  return await executeQuery(db, query, bindings);\n}\n", "export const cMessages = {\r\n    0o1: \"Unknown error\",\r\n    0o2: \"Upload or DB error\",\r\n    0o3: \"Invalid product data\",\r\n    0o4: \"Internal server error\",\r\n    0o5: \"Imgur upload failed\",\r\n}", "// backend/controllers/productController.ts\r\nimport { createProduct, updateProduct, deleteProduct, getFilteredProducts } from \"@/b/models/ProductModel\";\r\nimport { cMessages } from \"@/b/config/consoleMessage.ts\";\r\nimport { validateProduct } from \"@/b/utils/validateProduct\";\r\nimport { Context } from \"hono\";\r\n\r\nimport type { APIRoute, APIContext } from \"astro\";\r\nimport type { Product } from \"@/b/types/product\";\r\n\r\n\r\n/**d\r\n * Parse and validate the request body\r\n */\r\nasync function parseAndValidateRequestBody(request: Request): Promise<Product> {\r\n  const body: any = await request.json();\r\n\r\n  if (typeof body !== \"object\" || body === null) {\r\n    throw new Error(\"Invalid request body: expected an object\");\r\n  }\r\n\r\n  const id = crypto.randomUUID();\r\n  const product: Product = {\r\n    id,\r\n    name: body.name ?? \"Unknown Product\",\r\n    shop_name: body.shop_name ?? \"Unknown Shop\",\r\n    platform: body.platform ?? \"Unknown Platform\",\r\n    base_price: body.base_price ?? 0,\r\n    ec_data: typeof body.ec_data === \"string\" ? body.ec_data : JSON.stringify(body.ec_data ?? {}),\r\n  };\r\n\r\n  if (!validateProduct(product)) {\r\n    throw new Error(cMessages[2]); // Invalid product data\r\n  }\r\n\r\n  return product;\r\n}\r\n\r\n/**\r\n * Handle POST requests for creating a product\r\n */\r\nexport const POST: APIRoute = async ({ request }: { request: Request }) => {\r\n  try {\r\n    const product = await parseAndValidateRequestBody(request);\r\n    await createProduct(product);\r\n\r\n    return new Response(JSON.stringify({ status: \"success\", message: cMessages[1] }), {\r\n      status: 201,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error(\"[POST /product] Error:\", error.message);\r\n      const message = error.message || cMessages[4]; // Internal server error\r\n      return new Response(JSON.stringify({ status: \"error\", message }), {\r\n        status: error.message === cMessages[2] ? 400 : 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    } else {\r\n      console.error(\"[POST /product] Error:\", error);\r\n      return new Response(JSON.stringify({ status: \"error\", message: cMessages[4] }), {\r\n        status: 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Handle PUT requests for updating a product\r\n */\r\nexport const PUT: APIRoute = async ({ request, params }: APIContext) => {\r\n  try {\r\n    const body: any = await request.json();\r\n\r\n    const id = params.id; // \u578B\u3092 Record<string, string | undefined> \u306B\u5BFE\u5FDC\r\n    if (!id) {\r\n      return new Response(JSON.stringify({ status: \"error\", message: \"Product ID is required\" }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    if (typeof body !== \"object\" || body === null) {\r\n      return new Response(JSON.stringify({ status: \"error\", message: \"Invalid request body: expected an object\" }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    // Construct a complete Product object\r\n    const product: Product = {\r\n      id,\r\n      name: body.name ?? \"Unknown Product\",\r\n      shop_name: body.shop_name ?? \"Unknown Shop\",\r\n      platform: body.platform ?? \"Unknown Platform\",\r\n      base_price: body.base_price ?? 0,\r\n      ec_data: typeof body.ec_data === \"string\" ? body.ec_data : JSON.stringify(body.ec_data ?? {}),\r\n    };\r\n\r\n    if (!validateProduct(product)) {\r\n      return new Response(JSON.stringify({ status: \"error\", message: cMessages[2] }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    await updateProduct(product);\r\n\r\n    return new Response(JSON.stringify({ status: \"success\", message: cMessages[1] }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"[PUT /product/:id] Error:\", error instanceof Error ? error.message : error);\r\n    return new Response(JSON.stringify({ status: \"error\", message: cMessages[4] }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Handle DELETE requests for deleting a product\r\n */\r\nexport const DELETE: APIRoute = async ({ params }: APIContext) => {\r\n  try {\r\n    const id = params.id; // \u578B\u3092 Record<string, string | undefined> \u306B\u5BFE\u5FDC\r\n    if (!id) {\r\n      return new Response(JSON.stringify({ status: \"error\", message: \"Product ID is required\" }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    await deleteProduct(id);\r\n\r\n    return new Response(JSON.stringify({ status: \"success\", message: cMessages[1] }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"[DELETE /product/:id] Error:\", error instanceof Error ? error.message : error);\r\n    return new Response(JSON.stringify({ status: \"error\", message: cMessages[4] }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Handle GET requests for filtered products using Hono\r\n */\r\nexport async function handleGetFilteredProducts(c: Context): Promise<Response> {\r\n  try {\r\n    // \u30AF\u30A8\u30EA\u30D1\u30E9\u30E1\u30FC\u30BF\u3092\u53D6\u5F97\r\n    const shop = c.req.query(\"shop\") ?? undefined;\r\n    const limit = Number(c.req.query(\"limit\") ?? 100);\r\n    const ownOnly = c.req.query(\"ownOnly\") === \"true\";\r\n\r\n    // \u30E2\u30C7\u30EB\u304B\u3089\u30C7\u30FC\u30BF\u3092\u53D6\u5F97\r\n    const results = await getFilteredProducts({ shop, limit, ownOnly });\r\n\r\n    // \u6210\u529F\u30EC\u30B9\u30DD\u30F3\u30B9\u3092\u8FD4\u3059\r\n    return c.json(results, 200);\r\n  } catch (error) {\r\n    console.error(\"[GET /products] Error:\", error instanceof Error ? error.message : error);\r\n\r\n    // \u30A8\u30E9\u30FC\u30EC\u30B9\u30DD\u30F3\u30B9\u3092\u8FD4\u3059\r\n    return c.json({ status: \"error\", message: cMessages[4] }, 500); // Internal server error\r\n  }\r\n}\r\n", "import { handleGetFilteredProducts } from \"@/b/controllers/productController\";\nimport type { Context } from \"hono\";\n\nexport async function handleGetProducts(c: Context): Promise<Response> {\n  return await handleGetFilteredProducts(c);\n}", "export function renderIndex(): string {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Hono API</title>\n  <meta http-equiv=\"Content-Security-Policy\"\n        content=\"default-src 'self'; font-src 'self' data:; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self';\">\n  <style>\n    body { font-family: sans-serif; margin: 2rem; }\n  </style>\n</head>\n<body>\n  <h1>\u2705 Hono API is running</h1>\n  <p>You can now access your API endpoints.</p>\n</body>\n</html>`;\n}", "export const messages = {\n  passwordReset1: '\u30EA\u30BB\u30C3\u30C8\u30EA\u30F3\u30AF\u3092\u9001\u4FE1\u3057\u307E\u3057\u305F',\n  passwordReset2: '\u30EA\u30BB\u30C3\u30C8\u30EA\u30F3\u30AF\u306F1\u6642\u9593\u6709\u52B9\u3067\u3059',\n  passwordReset3: '\u30EA\u30BB\u30C3\u30C8\u30EA\u30F3\u30AF\u306F\u7121\u52B9\u3067\u3059',\n  ErrorMail1: '\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u304C\u767B\u9332\u3055\u308C\u3066\u3044\u307E\u305B\u3093',\n  ErrorMail2: '\u30E1\u30FC\u30EB\u9001\u4FE1\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F',\n  ErrorMail3: '\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u306F\u5FC5\u9808\u3067\u3059',\n  ErrorPasswordReset1: '\u30EA\u30BB\u30C3\u30C8\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F',\n  searchClient:{\n    ja: {\n      ErrorSearch: '\u5546\u54C1\u691C\u7D22\u306B\u5931\u6557\u3057\u307E\u3057\u305F',\n      ErrorSuggest: '\u30B5\u30B8\u30A7\u30B9\u30C8\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F'\n    },\n    en: {\n      ErrorSearch: 'Failed to search products',\n      ErrorSuggest: 'Failed to fetch suggestions'\n    }\n  },\n  api: {\n    sites: {\n      fetchError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      validateTitleUrl: {\n        ja: 'title \u3068 url \u306F\u5FC5\u9808\u3067\u3059\u3002',\n      },\n      insertError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u8FFD\u52A0\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      notFound: {\n        ja: '\u30B5\u30A4\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002',\n      },\n      updateError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u66F4\u65B0\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      noUpdateData: {\n        ja: '\u66F4\u65B0\u3059\u308B\u30C7\u30FC\u30BF\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002',\n      },\n      updateSuccess: {\n        ja: '\u66F4\u65B0\u6210\u529F',\n      },\n      deleteError: {\n        ja: '\u30C7\u30FC\u30BF\u306E\u524A\u9664\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002',\n      },\n      deleteNotFound: {\n        ja: '\u524A\u9664\u3059\u308B\u30C7\u30FC\u30BF\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002',\n      },\n      deleteSuccessPrefix: {\n        ja: '\u524A\u9664\u6210\u529F: ',\n      },\n    }\n  }\n};"],
  "mappings": "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",
  "names": ["Hono", "Hono", "Hono", "Hono", "PORT"]
}
