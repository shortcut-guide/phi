name: Deploy to VPS

on:
  push:
    branches: [develop, staging, main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set variables by branch
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "dir=phis-develop" >> $GITHUB_OUTPUT
            echo "env=develop" >> $GITHUB_OUTPUT
            echo "branch=develop" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "dir=phis-staging" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "branch=staging" >> $GITHUB_OUTPUT
          else
            echo "dir=phis-production" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
            echo "branch=main" >> $GITHUB_OUTPUT
          fi

      - name: Write SSH key
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy via SSH
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{secrets.VPS_USER}}@${{ secrets.VPS_HOST }} << EOF
            set -e
            git config --global --add safe.directory /var/www/${{ steps.vars.outputs.dir }}
            cd /var/www/${{ steps.vars.outputs.dir }}
            git fetch origin
            git reset --hard origin/${{ steps.vars.outputs.branch }}
            cp backend/.env.${{ steps.vars.outputs.env }} backend/.env
            cd backend
            npm install
            pm2 restart ${{ steps.vars.outputs.dir }} || pm2 start npm --name "${{ steps.vars.outputs.dir }}" -- start
          EOF
      
      - name: Deploy maintenance
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eux

            echo "Start deployment to maintenance..."
            cd /var/tmp || { echo "FATAL: /var/tmp not accessible"; df -h; exit 1; }

            export GH_TOKEN="${{ secrets.GH_TOKEN_WRITE }}"
            if [ -z "$GH_TOKEN" ]; then
              echo "GH_TOKEN is not set"
              exit 1
            fi

            export GIT_REPO="https://x-access-token:${GH_TOKEN}@github.com/shortcut-guide/phis.git"
            echo "Using repository: $GIT_REPO"

            rm -rf /var/tmp/phis-temp
            echo "Cloning repository..."
            git clone --depth=1 -b develop "$GIT_REPO" /var/tmp/phis-temp || {
              echo "Git clone failed"
              exit 1
            }

            echo "Checking directory contents after clone:"
            ls -al /var/tmp/phis-temp

            if [ ! -d /var/tmp/phis-temp/maintenance ]; then
              echo "maintenance directory not found after cloning."
              ls -al /var/tmp/phis-temp || true
              exit 1
            fi

            cd /var/tmp/phis-temp/maintenance

            TMP_SCRIPT="/var/tmp/deploy-config-$$.sh"
            cp ./deploy-config.sh "$TMP_SCRIPT"
            chmod +x "$TMP_SCRIPT"

            echo "export GH_TOKEN='$GH_TOKEN'" >> "$TMP_SCRIPT"
            echo "export GIT_REPO='$GIT_REPO'" >> "$TMP_SCRIPT"
            echo "echo \"Using token: \$GH_TOKEN\"" >> "$TMP_SCRIPT"
            echo "git clone \"\$GIT_REPO\" /tmp/phis-temp" >> "$TMP_SCRIPT"
            echo "cd /tmp/phis-temp/maintenance" >> "$TMP_SCRIPT"
            echo "bash ./deploy-config.sh" >> "$TMP_SCRIPT"

            sudo -E bash "$TMP_SCRIPT"
            rm -f "$TMP_SCRIPT"
            
      - name: Deploy webhook scripts
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "webhook/maintenance.js"
          target: "/var/www/webhook/"